


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;
    6 00000000         ;                               (c) Copyright 1992-2012,
                        Micrium, Weston, FL
    7 00000000         ;                                          All Rights Re
                       served
    8 00000000         ;
    9 00000000         ;                                           ARM Cortex-M
                       0 Port
   10 00000000         ;
   11 00000000         ; File      : os_cpu_a.asm
   12 00000000         ; Version   : V2.92.07.00
   13 00000000         ; By        : JJL
   14 00000000         ;             BN
   15 00000000         ;             MD
   16 00000000         ;
   17 00000000         ; For       : ARMv6M Cortex-M0
   18 00000000         ; Mode      : Thumb2
   19 00000000         ; Toolchain : IAR EWARM
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         
   22 00000000         ;*******************************************************
                       *************************************************
   23 00000000         ;                                           PUBLIC FUNCT
                       IONS
   24 00000000         ;*******************************************************
                       *************************************************
   25 00000000         
   26 00000000                 EXTERN           OSRunning   ; External function
                                                             references
   27 00000000                 EXTERN           OSPrioCur
   28 00000000                 EXTERN           OSPrioHighRdy
   29 00000000                 EXTERN           OSTCBCur
   30 00000000                 EXTERN           OSTCBHighRdy
   31 00000000                 EXTERN           OSIntExit
   32 00000000                 EXTERN           OSTaskSwHook
   33 00000000                 EXTERN           OS_CPU_ExceptStkBase
   34 00000000         
   35 00000000         
   36 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file (
                                                            internal)
   37 00000000                 EXPORT           OS_CPU_SR_Restore
   38 00000000                 EXPORT           OSStartHighRdy
   39 00000000                 EXPORT           OSCtxSw
   40 00000000                 EXPORT           OSIntCtxSw
   41 00000000                 EXPORT           OS_CPU_PendSVHandler
   42 00000000         
   43 00000000         ;*******************************************************
                       *************************************************
   44 00000000         ;                                                EQUATES
                       



ARM Macro Assembler    Page 2 


   45 00000000         ;*******************************************************
                       *************************************************
   46 00000000         
   47 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   48 00000000 E000ED20 
                       NVIC_SYSPRI14
                               EQU              0xE000ED20  ; System priority r
                                                            egister (priority 1
                                                            4).
   49 00000000 00FF0000 
                       NVIC_PENDSV_PRI
                               EQU              0x00FF0000  ; PendSV priority v
                                                            alue (lowest).
   50 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   51 00000000         
   52 00000000         ;*******************************************************
                       *************************************************
   53 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         
   56 00000000                 AREA             |.text|,CODE,READONLY,ALIGN=2 ;
                                                            
   57 00000000         
   58 00000000                 THUMB
   59 00000000                 REQUIRE8
   60 00000000                 PRESERVE8
   61 00000000         
   62 00000000         ;*******************************************************
                       *************************************************
   63 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   64 00000000         ;
   65 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   66 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   67 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   68 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   69 00000000         ;              into the CPU's status register.
   70 00000000         ;
   71 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   72 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   73 00000000         ;
   74 00000000         ;
   75 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   76 00000000         ;
   77 00000000         ;                 void Task (void *p_arg)



ARM Macro Assembler    Page 3 


   78 00000000         ;                 {
   79 00000000         ;                 #if OS_CRITICAL_METHOD == 3           
                               /* Allocate storage for CPU status register     
                               */
   80 00000000         ;                     OS_CPU_SR  cpu_sr;
   81 00000000         ;                 #endif
   82 00000000         ;
   83 00000000         ;                          :
   84 00000000         ;                          :
   85 00000000         ;                     OS_ENTER_CRITICAL();              
                               /* cpu_sr = OS_CPU_SaveSR();                    
                               */
   86 00000000         ;                          :
   87 00000000         ;                          :
   88 00000000         ;                     OS_EXIT_CRITICAL();               
                               /* OS_CPU_RestoreSR(cpu_sr);                    
                               */
   89 00000000         ;                          :
   90 00000000         ;                          :
   91 00000000         ;                 }
   92 00000000         ;*******************************************************
                       *************************************************
   93 00000000         
   94 00000000         OS_CPU_SR_Save
   95 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   96 00000004 B672            CPSID            I
   97 00000006 4770            BX               LR
   98 00000008         
   99 00000008         OS_CPU_SR_Restore
  100 00000008 F380 8810       MSR              PRIMASK, R0
  101 0000000C 4770            BX               LR
  102 0000000E         
  103 0000000E         ;*******************************************************
                       *************************************************
  104 0000000E         ;                                          START MULTITA
                       SKING
  105 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
  106 0000000E         ;
  107 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  108 0000000E         ;              the first task to start.
  109 0000000E         ;
  110 0000000E         ;           2) OSStartHighRdy() MUST:
  111 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  112 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  113 0000000E         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base;
  114 0000000E         ;              d) Set OSRunning to TRUE;
  115 0000000E         ;              e) Trigger PendSV exception;
  116 0000000E         ;              f) Enable interrupts (tasks will run with
                        interrupts enabled).
  117 0000000E         ;*******************************************************
                       *************************************************
  118 0000000E         



ARM Macro Assembler    Page 4 


  119 0000000E         OSStartHighRdy
  120 0000000E 481E            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  121 00000010 491E            LDR              R1, =NVIC_PENDSV_PRI
  122 00000012 6001            STR              R1, [R0]    ; Not storing entir
                                                            e byte with STRB to
                                                             avoid error
  123 00000014         
  124 00000014 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  125 00000016 F380 8809       MSR              PSP, R0
  126 0000001A         
  127 0000001A 481D            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  128 0000001C 6801            LDR              R1, [R0]
  129 0000001E F381 8808       MSR              MSP, R1
  130 00000022         
  131 00000022 481C            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  132 00000024 2101            MOVS             R1, #1
  133 00000026 7001            STRB             R1, [R0]
  134 00000028         
  135 00000028 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  136 0000002A 491C            LDR              R1, =NVIC_PENDSVSET
  137 0000002C 6001            STR              R1, [R0]
  138 0000002E         
  139 0000002E B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  140 00000030         
  141 00000030         OSStartHang
  142 00000030 E7FE            B                OSStartHang ; Should never get 
                                                            here
  143 00000032         
  144 00000032         
  145 00000032         ;*******************************************************
                       *************************************************
  146 00000032         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  147 00000032         ;                                           void OSCtxSw
                       (void)
  148 00000032         ;
  149 00000032         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  150 00000032         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  151 00000032         ;*******************************************************
                       *************************************************
  152 00000032         
  153 00000032         OSCtxSw
  154 00000032 4819            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 



ARM Macro Assembler    Page 5 


                                                            (causes context swi
                                                            tch)
  155 00000034 4919            LDR              R1, =NVIC_PENDSVSET
  156 00000036 6001            STR              R1, [R0]
  157 00000038 4770            BX               LR
  158 0000003A         
  159 0000003A         ;*******************************************************
                       *************************************************
  160 0000003A         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  161 0000003A         ;                                         void OSIntCtxS
                       w(void)
  162 0000003A         ;
  163 0000003A         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  164 0000003A         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  165 0000003A         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  166 0000003A         ;*******************************************************
                       *************************************************
  167 0000003A         
  168 0000003A         OSIntCtxSw
  169 0000003A 4817            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  170 0000003C 4917            LDR              R1, =NVIC_PENDSVSET
  171 0000003E 6001            STR              R1, [R0]
  172 00000040 4770            BX               LR
  173 00000042         
  174 00000042         ;*******************************************************
                       *************************************************
  175 00000042         ;                                         HANDLE PendSV 
                       EXCEPTION
  176 00000042         ;                                     void OS_CPU_PendSV
                       Handler(void)
  177 00000042         ;
  178 00000042         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  179 00000042         ;              context switches with Cortex-M0.  This is
                        because the Cortex-M0 auto-saves half of the
  180 00000042         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  181 00000042         ;              saving of R4-R7 is required and fixing up
                        the stack pointers.  Using the PendSV exception
  182 00000042         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  183 00000042         ;              a thread or occurs due to an interrupt or
                        exception.
  184 00000042         ;
  185 00000042         ;           2) Pseudo-code is:
  186 00000042         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  187 00000042         ;              b) Save remaining regs R4-R7 on process s
                       tack;
  188 00000042         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  189 00000042         ;              d) Call OSTaskSwHook();



ARM Macro Assembler    Page 6 


  190 00000042         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  191 00000042         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  192 00000042         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  193 00000042         ;              h) Restore R4-R7 from new process stack;
  194 00000042         ;              i) Perform exception return which will re
                       store remaining context.
  195 00000042         ;
  196 00000042         ;           3) On entry into PendSV handler:
  197 00000042         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  198 00000042         ;                 xPSR, PC, LR, R12, R0-R3
  199 00000042         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  200 00000042         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  201 00000042         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  202 00000042         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  203 00000042         ;
  204 00000042         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  205 00000042         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  206 00000042         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  207 00000042         ;*******************************************************
                       *************************************************
  208 00000042         
  209 00000042         OS_CPU_PendSVHandler
  210 00000042 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  211 00000044 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  212 00000048         
  213 00000048 2800            CMP              R0, #0
  214 0000004A D005            BEQ              OS_CPU_PendSVHandler_nosave ; e
                                                            quivalent code to C
                                                            BZ from M3 arch to 
                                                            M0 arch
  215 0000004C         ; Except that it does not change the condition code flag
                       s
  216 0000004C         
  217 0000004C 3810            SUBS             R0, R0, #0x10 ; Adjust stack po
                                                            inter to where memo
                                                            ry needs to be stor
                                                            ed to avoid overwri
                                                            ting
  218 0000004E C0F0            STM              R0!, {R4-R7} ; Stores 4 4-byte 
                                                            registers, default 
                                                            increments SP after
                                                             each storing
  219 00000050 3810            SUBS             R0, R0, #0x10 ; STM does not au
                                                            tomatically call ba
                                                            ck the SP to initia



ARM Macro Assembler    Page 7 


                                                            l location so we mu
                                                            st do this manually
                                                            
  220 00000052         
  221 00000052 4913            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  222 00000054 6809            LDR              R1, [R1]
  223 00000056 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  224 00000058         
  225 00000058         ; At this point, entire context of process has been save
                       d
  226 00000058         OS_CPU_PendSVHandler_nosave
  227 00000058 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  228 0000005A 4812            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  229 0000005C 4780            BLX              R0
  230 0000005E BC01            POP              {R0}
  231 00000060 4686            MOV              R14, R0
  232 00000062         
  233 00000062 4811            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  234 00000064 4911            LDR              R1, =OSPrioHighRdy
  235 00000066 780A            LDRB             R2, [R1]
  236 00000068 7002            STRB             R2, [R0]
  237 0000006A         
  238 0000006A 480D            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  239 0000006C 4910            LDR              R1, =OSTCBHighRdy
  240 0000006E 680A            LDR              R2, [R1]
  241 00000070 6002            STR              R2, [R0]
  242 00000072         
  243 00000072 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  244 00000074         
  245 00000074 C8F0            LDM              R0!, {R4-R7} ; Restore R4-R7 fr
                                                            om new process stac
                                                            k
  246 00000076         
  247 00000076 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  248 0000007A         
  249 0000007A 4670            MOV              R0,  R14
  250 0000007C 2104            MOVS             R1,  #0x04  ; Immediate move to
                                                             register
  251 0000007E 4308            ORRS             R0,  R1     ; Ensure exception 
                                                            return uses process
                                                             stack
  252 00000080 4686            MOV              R14, R0
  253 00000082 B662            CPSIE            I
  254 00000084 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  255 00000086         
  256 00000086 BF00            nop
  257 00000088                 END



ARM Macro Assembler    Page 8 


              E000ED20 
              00FF0000 
              00000000 
              00000000 
              E000ED04 
              10000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=inter
work --depend=.\objects\os_cpu_a.d -o.\objects\os_cpu_a.o -I.\RTE\_Target_1 -ID
:\Programfile\KEIL\ARM\PACK\Keil\Kinetis_KEAxx_DFP\1.3.0\Device\Include -ID:\Pr
ogramfile\KEIL\ARM\CMSIS\Include --predefine="__MICROLIB SETA 1" --predefine="_
_UVISION_VERSION SETA 526" --predefine="SKEAZ128xxx4 SETA 1" --list=.\listings\
os_cpu_a.lst ..\uCOS-II\Ports\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 56 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000032

Symbol: OSCtxSw
   Definitions
      At line 153 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 39 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 0000003A

Symbol: OSIntCtxSw
   Definitions
      At line 168 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 40 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000030

Symbol: OSStartHang
   Definitions
      At line 141 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 142 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 119 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 38 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 00000042

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 209 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 41 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 00000058

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 226 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 214 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 99 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 37 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 94 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 36 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 47 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 135 in file ..\uCOS-II\Ports\os_cpu_a.asm
      At line 154 in file ..\uCOS-II\Ports\os_cpu_a.asm
      At line 169 in file ..\uCOS-II\Ports\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 50 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 136 in file ..\uCOS-II\Ports\os_cpu_a.asm
      At line 155 in file ..\uCOS-II\Ports\os_cpu_a.asm
      At line 170 in file ..\uCOS-II\Ports\os_cpu_a.asm

NVIC_PENDSV_PRI 00FF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 49 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 121 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED20

Symbol: NVIC_SYSPRI14
   Definitions
      At line 48 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 120 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 31 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 27 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 233 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 28 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 234 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 26 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 131 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 29 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 221 in file ..\uCOS-II\Ports\os_cpu_a.asm
      At line 238 in file ..\uCOS-II\Ports\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 30 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 239 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 32 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 228 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 33 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 127 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
356 symbols in table
